



import Street_Modern_Standard: "/ESRI.lib/rules/Streets/Street_Modern_Standard.cga"
@Hidden
import Facade_Textures		 : "/ESRI.lib/rules/Facades/Facade_Textures.cga" () # completely controlled in rules below
@Hidden
import Roof_Textures		 : "/ESRI.lib/rules/Roofs/Roof_Textures.cga" () 	# completely controlled in rules below
@Hidden
import Plant_Loader			 : "/ESRI.lib/rules/Plants/Plant_Loader.cga" ()		# completely controlled in rules below




@Group("Building",1)
@Order(1) @Range(0.5,2) 
attr HeightFactor 	= 5

@Group("Trees",3)
@Order(1) @Range("None","Fan","Model","Analytical") @Description("Do not generate Models for whole city i.e. take care with polygon counts!")
attr ShowTrees		= "Fan"
@Order(2) @Range("Random Forest","Tropical","Zone 6 Trees")
attr Mix 			= "Zone 6 Trees"


@Order(1) @Range(0,4) 
attr NbrOfRightLanes 	= _getInitialRightLanes
@Order(2) @Range("yellow","white","none") 
attr Centerline 		= "yellow"
										
# Typically, the width values are overriden by the shape parameters, however in case no shape parameters are available (e.g. on Junction or Freeway shapes of nodes), the texture coordinates contain the needed values
@Hidden @Order(3) @Range(3.5,30) 
attr streetWidth 		= geometry.dv(0,unitSpace)				# REALWORLD-distance in V-direction corresponds to width of street (in case the geometry does not contain rounded entry geometry)
@Hidden @Order(4) @Range(1,6) 
attr laneWidth 			= streetWidth/geometry.dv(0,uvSpace)	# note that TEXTURE-distance in V-direction corresponds to number of lanes (as generated by CityEngine)

const TextureFolder 	= "/ESRI.lib/assets/Streets/"
const SidewalkHeight 	= 0.2  									# height of sidewalk (and depth of curbs)

const nLanesTotal		= rint(streetWidth/laneWidth)
const oneWay			= NbrOfRightLanes<=0 || NbrOfRightLanes>=nLanesTotal

_getInitialRightLanes 	= case nLanesTotal>2: rint(nLanesTotal/2+0.01) 
						  else				: 30%: rint(nLanesTotal/2) 40%: nLanesTotal else: 0   # adding some randomness to get a more diversified default appeareance



# ----------------------------------------
# Buildings
# ----------------------------------------

# will be overridden by corresponding attribute of initial shape

# constants
const radiusHighriseArea   = 400
const radiusCommercialArea = 800
const radiusApartmentArea = 1200
const radiusResidentialArea = 1600


attr buildingHeightFactor = 1

getColor = "#ffffff"  

@StartRule
Lot --> cleanupGeometry(all, 1.0) ResidentialBlock

LotInner --> 
	30% : Lot 
	else: color("#b5d29c")

LotCorner --> NIL

# ----------------------------------------
# Residential

# here we subdivide the initial shape further in case it is too big (to get kind of row housing...)
ResidentialBlock -->
	case scope.sx > 30:
		split(x){ ~18: ResidentialBlock }*
	case geometry.isConcave && scope.sx > 25:	# concaves are subdivided further (trying to get rid of the concavity)
		split(x){ ~14: ResidentialBlock }*
	case geometry.isConcave && scope.sz > 25:
		split(z){ ~14: ResidentialBlock }*
	case geometry.isRectangular(25) && scope.sz > scope.sx*2:
		split(z){ ~1: alignScopeToGeometry(yUp,2) ResidentialLot | ~1: ResidentialLot }
	case geometry.isRectangular(15) && scope.sz > scope.sx*3:
		split(z){ ~1: alignScopeToGeometry(yUp,2) ResidentialLot | ~1: ResidentialLot }
	else:
		ResidentialLot

ResidentialLot -->
	case geometry.nVertices < 4:   
		NIL
	case !geometry.isRectangular(10):
		innerRect
        split(x){ 1 : NIL 
                | 'rand(.85,.9): split(z){ ~rand(1,3): NIL | (rand(15,20)): ResidentialBuildingArea | ~1: NIL }
                | 1 : NIL }
	else:
		split(x){ 1 : NIL 
				| 'rand(.85,.9): split(z){ ~rand(1,3): NIL | (rand(15,20)): ResidentialBuildingArea | ~1: NIL }
				| 1 : NIL }

ResidentialBuildingArea -->
	case scope.sx < 10 || scope.sz < 10:  # too small to build a house
		NIL
	else:
		alignScopeToAxes(y) s('1,0,'1) # there are different possibilites to handle non-horizontal lots... scaling it to zero in the y-direction like here is the simplest way to handle it
		ResidentialBuilding

# generate some mass models according to a few very simple rules
ResidentialBuilding -->
		ResidentialShape
		ResidentialExtension
		ResidentialGarage
	
ResidentialShape -->
	50% : s('1.0,0,'0.6) center(xz) ResidentialShape(rand(5,7))
	20% : s('0.8,0,'0.5) center(xz) ResidentialShape(rand(4.5,5.5))
	else: s('0.8,0,'0.6) center(xz) ResidentialShape(rand(5,7))
	
ResidentialShape(h) -->	
	15% : Mass(h,"gable")
	5%  : Mass(h,"hip")
	17% : [ s('1.0,0,'0.8) Mass(h,"gable") ] split(x){ 'rand(0.35,0.6): t(0,0,'0.4) s('1,0,'rand(0.45,0.65)) Mass(h,"gable2") } # L-shape left for gable roofs
	17% : [ s('1.0,0,'0.8) Mass(h,"hip")   ] split(x){ 'rand(0.35,0.6): t(0,0,'0.1) s('1,0,'rand(0.8,0.95)) Mass(h,"hip")     } # L-shape left for hip roofs
	17% : [ s('1.0,0,'0.8) Mass(h,"gable") ] split(x){ ~1: NIL | 'rand(0.35,0.6): t(0,0,'0.4) s('1,0,'rand(0.45,0.65)) Mass(h,"gable2") } # L-shape right for gable roofs
	17% : [ s('1.0,0,'0.8) Mass(h,"hip")   ] split(x){ ~1: NIL | 'rand(0.35,0.6): t(0,0,'0.1) s('1,0,'rand(0.8,0.95))  Mass(h,"hip")    } # L-shape right for hip roofs
	5%  : [ s('1.0,0,'0.8) Mass(h,"gable") ] split(x){ ~1: NIL | 'rand(0.35,0.6): t(0,0,'0.4) s('1,0,'rand(0.55,0.65)) Mass(h,"gable2") | ~1: NIL } # T-shape for gable roofs
	5%  : [ s('1.0,0,'0.8) Mass(h,"hip")   ] split(x){ ~1: NIL | 'rand(0.35,0.6): t(0,0,'0.1) s('1,0,'rand(0.8,0.95))  Mass(h,"hip")    | ~1: NIL } # T-shape for hip roofs
	1%  : [ s('1.0,0,'0.8) Mass(h,"gable") ] t(0,0,'0.4) s('1,0,'rand(0.55,0.65)) split(x){ 'rand(0.3,0.4): Mass(h,"gable2") | ~1: NIL | 'rand(0.3,0.4): Mass(h,"gable2") }  # U-shape for gable roofs
	else: [ s('1.0,0,'0.8) Mass(h,"hip")   ] t(0,0,'0.1) s('1,0,'rand(0.8,0.95))  split(x){ 'rand(0.3,0.4): Mass(h,"hip")    | ~1: NIL | 'rand(0.3,0.4): Mass(h,"hip")    }  # U-shape for hip roofs
	
ResidentialExtension -->
	7%  : split(z){ (rand(1,3)): NIL | ~1: Mass(rand(3,4),extensionRoofType) | (rand(1,3)): NIL }
	18% : split(z){ '(rand(.4,.7)): split(x){ '(rand(.3,.7)): Mass(rand(3,4.5),extensionRoofType) } }
	18% : split(z){ '(rand(.2)): NIL | '(rand(.2,.5)): split(x){ '(rand(.3,.7)): Mass(rand(3,4.5),extensionRoofType) } }
	18% : split(z){ '(rand(.4,.7)): split(x){ ~1: NIL | '(rand(.3,.7)): Mass(rand(3,4.5),extensionRoofType) } }
	18% : split(z){ '(rand(.2)): NIL | '(rand(.2,.5)): split(x){ ~1: NIL | '(rand(.3,.7)): Mass(rand(3,4.5),extensionRoofType) } }
	else: NIL

extensionRoofType = 70%: "gable" else: "hip"	
garageRoofType = 20%: "gable" else: "flat"
	
ResidentialGarage -->
	46% : split(z){ ~1: NIL | '(rand(.4,.5)): split(x){ (rand(5,8)): Mass(rand(2,3),garageRoofType) } | '(rand(.2)): NIL }
	46% : split(z){ ~1: NIL | '(rand(.4,.5)): split(x){ ~1: NIL | (rand(5,8)): Mass(rand(2,3),garageRoofType) } | '(rand(.2)): NIL }
	else: NIL
	
Mass(h,rooftype) -->
	case rooftype == "flat":
		extrude(h*buildingHeightFactor) Stories.
	else:
		extrude(h*buildingHeightFactor) Stories comp(f){top: Roof(rooftype) }

Stories -->
	comp(f){ side = Stories. }

const roofAngle = rand(20,30)

Roof(rooftype) -->
	case rooftype == "rooffloorRect":
		90% : Roof. innerRect [ s('(rand(0.6,0.9)),'(rand(0.6,0.9)),'1) center(xy) alignScopeToGeometry(yUp,auto) RoofFloorShape(rand(2,3)) ]
		else: Roof.
	case rooftype == "rooffloor":
		70% : Roof. innerRect [ s('(rand(0.6,0.9)),'(rand(0.6,0.9)),'1) center(xy) alignScopeToGeometry(yUp,auto) RoofFloorShape(rand(2,3)) ]
		25% : Roof. innerRect [ s('(rand(0.8,0.95)),'(rand(0.8,0.95)),'1) center(xy) alignScopeToGeometry(yUp,auto) ResidentialShape(rand(2,3)) ]
		else: Roof.
	case rooftype == "gable1":
		roofGable(roofAngle,0,0,false,1) comp(f){ bottom: NIL | all = Roof. }
	case rooftype == "gable2":
		roofGable(roofAngle,0,0,false,0) comp(f){ bottom: NIL | all = Roof. }
	case rooftype == "gable":
		roofGable(roofAngle) comp(f){ bottom: NIL | all = Roof. }
	case rooftype == "hip":
		roofHip(roofAngle) comp(f){ bottom: NIL | all = Roof. }
	else: 
		Roof.  # flatroof

RoofFloorShape(h) -->	
	split(z){ ~1: RoofFloorBack(h) | 'rand(0.5,0.7): Mass(h,"flat") }
		
RoofFloorBack(h) -->
	20% : split(x){ 'rand(0.2,0.8): Mass(h,"flat") } # L-shape left
	20% : split(x){ ~1: NIL | 'rand(0.2,0.8): Mass(h,"flat") } # L-shape right
	40% : split(x){ ~(rand): NIL | (rand(0.8,1.5)*scope.sz):  Mass(h,"flat") | ~(rand): NIL } # T-shape
	10% : split(x){ 'rand(0.2,0.45): Mass(h,"flat") | ~1: NIL | 'rand(0.2,0.45): Mass(h,"flat") }  # U-shape
	else: NIL




###################################################3
# Ground Cover
#

const getDirtmapTexture = fileRandom("/ESRI.lib/assets/General/Dirtmap/dirtmap*.jpg")
const getParkingTexture = fileRandom("/ESRI.lib/assets/Groundcover/Parking/parking*.jpg")
getGreenSpaceTexture	= imageBestRatio("/ESRI.lib/assets/Groundcover/Green/green*.jpg","yx")

ParkingGround -->
	alignScopeToGeometry(zUp,0,longest) 
	setupProjection(0,scope.yx,20,35) projectUV(0)
	texture(getParkingTexture)
	setupProjection(2,scope.yx,'1,'1) projectUV(2) 
	set(material.dirtmap,getDirtmapTexture) 

GreenGround -->
	alignScopeToGeometry(zUp,0,longest) 
	setupProjection(0,scope.yx,'1,'1) projectUV(0)
	texture(getGreenSpaceTexture)
	setupProjection(2,scope.yx,'1,'1) projectUV(2) 
	set(material.dirtmap,getDirtmapTexture) 



###################################################3
# Trees
#

getTreeTropical 	= listRandom("Coconut Palm;Date Palm;Palm Lily;Mexican Palmetto;California Palm;Ruffle Palm;Banana Tree;Bamboo;Cabbage Palm Fern;")
getTreeRandomForest = listRandom("American Chestnut;Red Hickory;Southern Magnolia;Sugar Maple;Northern Red Oak;White Oak;Scots Pine;Douglas Fir;Lodgepole Pine;California Redwood;Giant Sequoia;American Sycamore;Sassafras;California Walnut;")
getTreeZone06Tree	= listRandom("Sugar Maple;California Incense Cedar;Red Hickory;American Chestnut;Western Juniper;American Sycamore;Northern Red Oak;Basswood;Field Elm;Lawson Cypress;Honey Locust;Yellow Poplar;Black Tupelo;")

getTree =
	case Mix == "Tropical"			: getTreeTropical
	case Mix == "Random Forest"		: getTreeRandomForest
	case Mix == "Zone 6 Trees"		: getTreeZone06Tree
	else							: ""

FewTrees --> 
	case ShowTrees != "None":
		set(Plant_Loader.Representation,ShowTrees)
		scatter(surface, floor(geometry.area/250), uniform){ Plant_Loader.Generate(getTree) }
		NIL
	else: 
		NIL

Trees --> 
	case ShowTrees != "None":
		set(Plant_Loader.Representation,ShowTrees)
		scatter(surface, floor(geometry.area/300), uniform){ Plant_Loader.Generate(getTree) }
		scatter(surface, floor(geometry.area/200), uniform){ Plant_Loader.Generate(getTree) }
		scatter(surface, floor(geometry.area/400), uniform){ Plant_Loader.Generate(getTree) }
		NIL
	else: 
		NIL



###################################################3
# Street
#


@StartRule
Street -->			# split away the side geometry on the streets 
	split(v,uvSpace,0){ -geometry.vMin: Asphalt 		# the lanes start at v-coord 0 i.e. everything below can be splitted away (= asphalt)
					  | nLanesTotal	  : Lanes 			# the lanes end at v-coord nLanesTotal
					  | ~1			  : Asphalt }		# all remaining geometry beyond v-coord nLanesTotal can be split away

Lanes -->
	case Centerline=="none" || oneWay:  		# LANE WITHOUT CENTERLINE: these textures can be repeated also in v-direction, i.e. every lane contains ONE edge line on the texture
		scaleUV(0,1,nLanesTotal*256/(nLanesTotal*256+18))		# v-coord: texture image has 4 lanes (see above*)... and getting rid of the repeating edge line by cutting away a part of the texture (one lane is 256 px in the texture and a line is 18 px wide))
		LanesTexture("lanes_4_stripes_white_14x14m.jpg",4)
	else:										# LANE WITH CENTERLINE: note that centerline is a double line - this influence the mapping method (pls compare with the non-centerline case below)
		translateUV(0,0,4-NbrOfRightLanes)  					# number of lanes which the texture (with its 8 lanes) must be translated (in v-dir) so that its center is placed on street center
		LanesTexture("lanes_8_centerline_"+Centerline+"_14x28m.jpg",8)
										
LanesTexture(texFile,texNLanes) -->
	tileUV(0,~14,0)							# the tileUV operation makes sure that one unit in u-space corresponds to approx 14 meters, the v-coord is not touched in the case of 0 as parameter
	scaleUV(0,1,1/texNLanes)				# scaling the v coord for the texture (e.g. a street with 2 lanes has v coords from 0 to 2, this means it has to map onto 0 to 2/8 on our texture with its 8 lanes)	
	texture(TextureFolder + "Lanes/" + texFile)

Asphalt -->
	tileUV(0,14,14) texture(TextureFolder + "Lanes/asphalt_14x14m.jpg")


# Other default Start Rules for Network Shapes

Joint 				--> Lanes
Junction 			--> Lanes
Freeway 			--> Lanes
FreewayEntry 		--> Lanes
Crossing 			--> Asphalt		
Roundabout 			--> Asphalt
RoundaboutIsland 	--> Asphalt


# Sidewalk

Sidewalk -->
	split(v,unitSpace,0){ SidewalkHeight: Curbs | ~1:  Pavement }

Curbs --> 
	extrude(world.y,SidewalkHeight)
  	tileUV(0,~2,'1) texture(TextureFolder + "Sidewalks/curbs_2m.jpg")

Pavement -->
	translate(rel,world,0,SidewalkHeight,0)
	tileUV(0,~2,'1) texture(TextureFolder + "Sidewalks/pavement_01_2x2m.jpg")

